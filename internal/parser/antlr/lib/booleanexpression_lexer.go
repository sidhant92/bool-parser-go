// Code generated from /Users/sid/Desktop/filter1/BooleanExpression.g4 by ANTLR 4.13.1. DO NOT EDIT.

package lib

import (
	"fmt"
	"github.com/antlr4-go/antlr/v4"
	"sync"
	"unicode"
)

// Suppress unused import error
var _ = fmt.Printf
var _ = sync.Once{}
var _ = unicode.IsLetter

type BooleanExpressionLexer struct {
	*antlr.BaseLexer
	channelNames []string
	modeNames    []string
	// TODO: EOF string
}

var BooleanExpressionLexerLexerStaticData struct {
	once                   sync.Once
	serializedATN          []int32
	ChannelNames           []string
	ModeNames              []string
	LiteralNames           []string
	SymbolicNames          []string
	RuleNames              []string
	PredictionContextCache *antlr.PredictionContextCache
	atn                    *antlr.ATN
	decisionToDFA          []*antlr.DFA
}

func booleanexpressionlexerLexerInit() {
	staticData := &BooleanExpressionLexerLexerStaticData
	staticData.ChannelNames = []string{
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	}
	staticData.ModeNames = []string{
		"DEFAULT_MODE",
	}
	staticData.LiteralNames = []string{
		"", "','", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
		"", "", "", "'+'", "'-'", "'*'", "'/'", "'%'", "'^'", "'!='", "'>'",
		"'>='", "'<'", "'<='", "'='", "'('", "')'",
	}
	staticData.SymbolicNames = []string{
		"", "", "IN", "TO", "AND", "OR", "NOT", "TRUE", "FALSE", "CONTAINS_ALL",
		"CONTAINS_ANY", "MIN", "MAX", "AVG", "SUM", "MEAN", "MODE", "MEDIAN",
		"LEN", "INT", "ADD", "SUBTRACT", "MULTIPLY", "DIVIDE", "MODULUS", "EXPONENT",
		"NE", "GT", "GE", "LT", "LE", "EQ", "LPAREN", "RPAREN", "DECIMAL", "APP_VERSION",
		"INTEGER", "WS", "WORD", "ALPHANUMERIC", "SQ", "DQ",
	}
	staticData.RuleNames = []string{
		"T__0", "IN", "TO", "AND", "OR", "NOT", "TRUE", "FALSE", "CONTAINS_ALL",
		"CONTAINS_ANY", "MIN", "MAX", "AVG", "SUM", "MEAN", "MODE", "MEDIAN",
		"LEN", "INT", "ADD", "SUBTRACT", "MULTIPLY", "DIVIDE", "MODULUS", "EXPONENT",
		"NE", "GT", "GE", "LT", "LE", "EQ", "LPAREN", "RPAREN", "DECIMAL", "APP_VERSION",
		"INTEGER", "WS", "WORD", "ALPHANUMERIC", "SQ", "DQ",
	}
	staticData.PredictionContextCache = antlr.NewPredictionContextCache()
	staticData.serializedATN = []int32{
		4, 0, 41, 394, 6, -1, 2, 0, 7, 0, 2, 1, 7, 1, 2, 2, 7, 2, 2, 3, 7, 3, 2,
		4, 7, 4, 2, 5, 7, 5, 2, 6, 7, 6, 2, 7, 7, 7, 2, 8, 7, 8, 2, 9, 7, 9, 2,
		10, 7, 10, 2, 11, 7, 11, 2, 12, 7, 12, 2, 13, 7, 13, 2, 14, 7, 14, 2, 15,
		7, 15, 2, 16, 7, 16, 2, 17, 7, 17, 2, 18, 7, 18, 2, 19, 7, 19, 2, 20, 7,
		20, 2, 21, 7, 21, 2, 22, 7, 22, 2, 23, 7, 23, 2, 24, 7, 24, 2, 25, 7, 25,
		2, 26, 7, 26, 2, 27, 7, 27, 2, 28, 7, 28, 2, 29, 7, 29, 2, 30, 7, 30, 2,
		31, 7, 31, 2, 32, 7, 32, 2, 33, 7, 33, 2, 34, 7, 34, 2, 35, 7, 35, 2, 36,
		7, 36, 2, 37, 7, 37, 2, 38, 7, 38, 2, 39, 7, 39, 2, 40, 7, 40, 1, 0, 1,
		0, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 90, 8, 1, 1, 2, 1, 2, 1, 2, 1, 2, 3, 2,
		96, 8, 2, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 3, 3, 106, 8,
		3, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 3, 4, 114, 8, 4, 1, 5, 1, 5, 1,
		5, 1, 5, 1, 5, 1, 5, 3, 5, 122, 8, 5, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1,
		6, 1, 6, 1, 6, 3, 6, 132, 8, 6, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1,
		7, 1, 7, 1, 7, 1, 7, 3, 7, 144, 8, 7, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1,
		8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1,
		8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 3, 8, 170, 8, 8, 1, 9, 1, 9, 1,
		9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1,
		9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 3, 9, 196, 8,
		9, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 3, 10, 204, 8, 10, 1, 11,
		1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 3, 11, 212, 8, 11, 1, 12, 1, 12, 1,
		12, 1, 12, 1, 12, 1, 12, 3, 12, 220, 8, 12, 1, 13, 1, 13, 1, 13, 1, 13,
		1, 13, 1, 13, 3, 13, 228, 8, 13, 1, 14, 1, 14, 1, 14, 1, 14, 1, 14, 1,
		14, 1, 14, 1, 14, 3, 14, 238, 8, 14, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15,
		1, 15, 1, 15, 1, 15, 3, 15, 248, 8, 15, 1, 16, 1, 16, 1, 16, 1, 16, 1,
		16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 3, 16, 262, 8, 16,
		1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 3, 17, 270, 8, 17, 1, 18, 1,
		18, 1, 18, 1, 18, 1, 18, 1, 18, 3, 18, 278, 8, 18, 1, 19, 1, 19, 1, 20,
		1, 20, 1, 21, 1, 21, 1, 22, 1, 22, 1, 23, 1, 23, 1, 24, 1, 24, 1, 25, 1,
		25, 1, 25, 1, 26, 1, 26, 1, 27, 1, 27, 1, 27, 1, 28, 1, 28, 1, 29, 1, 29,
		1, 29, 1, 30, 1, 30, 1, 31, 1, 31, 1, 32, 1, 32, 1, 33, 4, 33, 312, 8,
		33, 11, 33, 12, 33, 313, 1, 33, 1, 33, 4, 33, 318, 8, 33, 11, 33, 12, 33,
		319, 1, 34, 1, 34, 1, 34, 4, 34, 325, 8, 34, 11, 34, 12, 34, 326, 1, 35,
		4, 35, 330, 8, 35, 11, 35, 12, 35, 331, 1, 36, 4, 36, 335, 8, 36, 11, 36,
		12, 36, 336, 1, 36, 1, 36, 1, 37, 1, 37, 1, 37, 4, 37, 344, 8, 37, 11,
		37, 12, 37, 345, 1, 37, 1, 37, 1, 37, 1, 37, 5, 37, 352, 8, 37, 10, 37,
		12, 37, 355, 9, 37, 1, 37, 1, 37, 3, 37, 359, 8, 37, 1, 37, 1, 37, 1, 37,
		1, 37, 4, 37, 365, 8, 37, 11, 37, 12, 37, 366, 1, 37, 1, 37, 3, 37, 371,
		8, 37, 3, 37, 373, 8, 37, 1, 38, 1, 38, 1, 39, 1, 39, 5, 39, 379, 8, 39,
		10, 39, 12, 39, 382, 9, 39, 1, 39, 1, 39, 1, 40, 1, 40, 5, 40, 388, 8,
		40, 10, 40, 12, 40, 391, 9, 40, 1, 40, 1, 40, 2, 380, 389, 0, 41, 1, 1,
		3, 2, 5, 3, 7, 4, 9, 5, 11, 6, 13, 7, 15, 8, 17, 9, 19, 10, 21, 11, 23,
		12, 25, 13, 27, 14, 29, 15, 31, 16, 33, 17, 35, 18, 37, 19, 39, 20, 41,
		21, 43, 22, 45, 23, 47, 24, 49, 25, 51, 26, 53, 27, 55, 28, 57, 29, 59,
		30, 61, 31, 63, 32, 65, 33, 67, 34, 69, 35, 71, 36, 73, 37, 75, 38, 77,
		39, 79, 40, 81, 41, 1, 0, 5, 1, 0, 48, 57, 3, 0, 9, 10, 12, 13, 32, 32,
		2, 0, 46, 46, 95, 95, 2, 0, 45, 46, 95, 95, 3, 0, 48, 57, 65, 90, 97, 122,
		434, 0, 1, 1, 0, 0, 0, 0, 3, 1, 0, 0, 0, 0, 5, 1, 0, 0, 0, 0, 7, 1, 0,
		0, 0, 0, 9, 1, 0, 0, 0, 0, 11, 1, 0, 0, 0, 0, 13, 1, 0, 0, 0, 0, 15, 1,
		0, 0, 0, 0, 17, 1, 0, 0, 0, 0, 19, 1, 0, 0, 0, 0, 21, 1, 0, 0, 0, 0, 23,
		1, 0, 0, 0, 0, 25, 1, 0, 0, 0, 0, 27, 1, 0, 0, 0, 0, 29, 1, 0, 0, 0, 0,
		31, 1, 0, 0, 0, 0, 33, 1, 0, 0, 0, 0, 35, 1, 0, 0, 0, 0, 37, 1, 0, 0, 0,
		0, 39, 1, 0, 0, 0, 0, 41, 1, 0, 0, 0, 0, 43, 1, 0, 0, 0, 0, 45, 1, 0, 0,
		0, 0, 47, 1, 0, 0, 0, 0, 49, 1, 0, 0, 0, 0, 51, 1, 0, 0, 0, 0, 53, 1, 0,
		0, 0, 0, 55, 1, 0, 0, 0, 0, 57, 1, 0, 0, 0, 0, 59, 1, 0, 0, 0, 0, 61, 1,
		0, 0, 0, 0, 63, 1, 0, 0, 0, 0, 65, 1, 0, 0, 0, 0, 67, 1, 0, 0, 0, 0, 69,
		1, 0, 0, 0, 0, 71, 1, 0, 0, 0, 0, 73, 1, 0, 0, 0, 0, 75, 1, 0, 0, 0, 0,
		77, 1, 0, 0, 0, 0, 79, 1, 0, 0, 0, 0, 81, 1, 0, 0, 0, 1, 83, 1, 0, 0, 0,
		3, 89, 1, 0, 0, 0, 5, 95, 1, 0, 0, 0, 7, 105, 1, 0, 0, 0, 9, 113, 1, 0,
		0, 0, 11, 121, 1, 0, 0, 0, 13, 131, 1, 0, 0, 0, 15, 143, 1, 0, 0, 0, 17,
		169, 1, 0, 0, 0, 19, 195, 1, 0, 0, 0, 21, 203, 1, 0, 0, 0, 23, 211, 1,
		0, 0, 0, 25, 219, 1, 0, 0, 0, 27, 227, 1, 0, 0, 0, 29, 237, 1, 0, 0, 0,
		31, 247, 1, 0, 0, 0, 33, 261, 1, 0, 0, 0, 35, 269, 1, 0, 0, 0, 37, 277,
		1, 0, 0, 0, 39, 279, 1, 0, 0, 0, 41, 281, 1, 0, 0, 0, 43, 283, 1, 0, 0,
		0, 45, 285, 1, 0, 0, 0, 47, 287, 1, 0, 0, 0, 49, 289, 1, 0, 0, 0, 51, 291,
		1, 0, 0, 0, 53, 294, 1, 0, 0, 0, 55, 296, 1, 0, 0, 0, 57, 299, 1, 0, 0,
		0, 59, 301, 1, 0, 0, 0, 61, 304, 1, 0, 0, 0, 63, 306, 1, 0, 0, 0, 65, 308,
		1, 0, 0, 0, 67, 311, 1, 0, 0, 0, 69, 321, 1, 0, 0, 0, 71, 329, 1, 0, 0,
		0, 73, 334, 1, 0, 0, 0, 75, 372, 1, 0, 0, 0, 77, 374, 1, 0, 0, 0, 79, 376,
		1, 0, 0, 0, 81, 385, 1, 0, 0, 0, 83, 84, 5, 44, 0, 0, 84, 2, 1, 0, 0, 0,
		85, 86, 5, 73, 0, 0, 86, 90, 5, 78, 0, 0, 87, 88, 5, 105, 0, 0, 88, 90,
		5, 110, 0, 0, 89, 85, 1, 0, 0, 0, 89, 87, 1, 0, 0, 0, 90, 4, 1, 0, 0, 0,
		91, 92, 5, 84, 0, 0, 92, 96, 5, 79, 0, 0, 93, 94, 5, 116, 0, 0, 94, 96,
		5, 111, 0, 0, 95, 91, 1, 0, 0, 0, 95, 93, 1, 0, 0, 0, 96, 6, 1, 0, 0, 0,
		97, 98, 5, 65, 0, 0, 98, 99, 5, 78, 0, 0, 99, 106, 5, 68, 0, 0, 100, 101,
		5, 97, 0, 0, 101, 102, 5, 110, 0, 0, 102, 106, 5, 100, 0, 0, 103, 104,
		5, 38, 0, 0, 104, 106, 5, 38, 0, 0, 105, 97, 1, 0, 0, 0, 105, 100, 1, 0,
		0, 0, 105, 103, 1, 0, 0, 0, 106, 8, 1, 0, 0, 0, 107, 108, 5, 79, 0, 0,
		108, 114, 5, 82, 0, 0, 109, 110, 5, 111, 0, 0, 110, 114, 5, 114, 0, 0,
		111, 112, 5, 124, 0, 0, 112, 114, 5, 124, 0, 0, 113, 107, 1, 0, 0, 0, 113,
		109, 1, 0, 0, 0, 113, 111, 1, 0, 0, 0, 114, 10, 1, 0, 0, 0, 115, 116, 5,
		78, 0, 0, 116, 117, 5, 79, 0, 0, 117, 122, 5, 84, 0, 0, 118, 119, 5, 110,
		0, 0, 119, 120, 5, 111, 0, 0, 120, 122, 5, 116, 0, 0, 121, 115, 1, 0, 0,
		0, 121, 118, 1, 0, 0, 0, 122, 12, 1, 0, 0, 0, 123, 124, 5, 84, 0, 0, 124,
		125, 5, 82, 0, 0, 125, 126, 5, 85, 0, 0, 126, 132, 5, 69, 0, 0, 127, 128,
		5, 116, 0, 0, 128, 129, 5, 114, 0, 0, 129, 130, 5, 117, 0, 0, 130, 132,
		5, 101, 0, 0, 131, 123, 1, 0, 0, 0, 131, 127, 1, 0, 0, 0, 132, 14, 1, 0,
		0, 0, 133, 134, 5, 70, 0, 0, 134, 135, 5, 65, 0, 0, 135, 136, 5, 76, 0,
		0, 136, 137, 5, 83, 0, 0, 137, 144, 5, 69, 0, 0, 138, 139, 5, 102, 0, 0,
		139, 140, 5, 97, 0, 0, 140, 141, 5, 108, 0, 0, 141, 142, 5, 115, 0, 0,
		142, 144, 5, 101, 0, 0, 143, 133, 1, 0, 0, 0, 143, 138, 1, 0, 0, 0, 144,
		16, 1, 0, 0, 0, 145, 146, 5, 67, 0, 0, 146, 147, 5, 79, 0, 0, 147, 148,
		5, 78, 0, 0, 148, 149, 5, 84, 0, 0, 149, 150, 5, 65, 0, 0, 150, 151, 5,
		73, 0, 0, 151, 152, 5, 78, 0, 0, 152, 153, 5, 83, 0, 0, 153, 154, 5, 95,
		0, 0, 154, 155, 5, 65, 0, 0, 155, 156, 5, 76, 0, 0, 156, 170, 5, 76, 0,
		0, 157, 158, 5, 99, 0, 0, 158, 159, 5, 111, 0, 0, 159, 160, 5, 110, 0,
		0, 160, 161, 5, 116, 0, 0, 161, 162, 5, 97, 0, 0, 162, 163, 5, 105, 0,
		0, 163, 164, 5, 110, 0, 0, 164, 165, 5, 115, 0, 0, 165, 166, 5, 95, 0,
		0, 166, 167, 5, 97, 0, 0, 167, 168, 5, 108, 0, 0, 168, 170, 5, 108, 0,
		0, 169, 145, 1, 0, 0, 0, 169, 157, 1, 0, 0, 0, 170, 18, 1, 0, 0, 0, 171,
		172, 5, 67, 0, 0, 172, 173, 5, 79, 0, 0, 173, 174, 5, 78, 0, 0, 174, 175,
		5, 84, 0, 0, 175, 176, 5, 65, 0, 0, 176, 177, 5, 73, 0, 0, 177, 178, 5,
		78, 0, 0, 178, 179, 5, 83, 0, 0, 179, 180, 5, 95, 0, 0, 180, 181, 5, 65,
		0, 0, 181, 182, 5, 78, 0, 0, 182, 196, 5, 89, 0, 0, 183, 184, 5, 99, 0,
		0, 184, 185, 5, 111, 0, 0, 185, 186, 5, 110, 0, 0, 186, 187, 5, 116, 0,
		0, 187, 188, 5, 97, 0, 0, 188, 189, 5, 105, 0, 0, 189, 190, 5, 110, 0,
		0, 190, 191, 5, 115, 0, 0, 191, 192, 5, 95, 0, 0, 192, 193, 5, 97, 0, 0,
		193, 194, 5, 110, 0, 0, 194, 196, 5, 121, 0, 0, 195, 171, 1, 0, 0, 0, 195,
		183, 1, 0, 0, 0, 196, 20, 1, 0, 0, 0, 197, 198, 5, 77, 0, 0, 198, 199,
		5, 73, 0, 0, 199, 204, 5, 78, 0, 0, 200, 201, 5, 109, 0, 0, 201, 202, 5,
		105, 0, 0, 202, 204, 5, 110, 0, 0, 203, 197, 1, 0, 0, 0, 203, 200, 1, 0,
		0, 0, 204, 22, 1, 0, 0, 0, 205, 206, 5, 77, 0, 0, 206, 207, 5, 65, 0, 0,
		207, 212, 5, 88, 0, 0, 208, 209, 5, 109, 0, 0, 209, 210, 5, 97, 0, 0, 210,
		212, 5, 120, 0, 0, 211, 205, 1, 0, 0, 0, 211, 208, 1, 0, 0, 0, 212, 24,
		1, 0, 0, 0, 213, 214, 5, 65, 0, 0, 214, 215, 5, 86, 0, 0, 215, 220, 5,
		71, 0, 0, 216, 217, 5, 97, 0, 0, 217, 218, 5, 118, 0, 0, 218, 220, 5, 103,
		0, 0, 219, 213, 1, 0, 0, 0, 219, 216, 1, 0, 0, 0, 220, 26, 1, 0, 0, 0,
		221, 222, 5, 83, 0, 0, 222, 223, 5, 85, 0, 0, 223, 228, 5, 77, 0, 0, 224,
		225, 5, 115, 0, 0, 225, 226, 5, 117, 0, 0, 226, 228, 5, 109, 0, 0, 227,
		221, 1, 0, 0, 0, 227, 224, 1, 0, 0, 0, 228, 28, 1, 0, 0, 0, 229, 230, 5,
		77, 0, 0, 230, 231, 5, 69, 0, 0, 231, 232, 5, 65, 0, 0, 232, 238, 5, 78,
		0, 0, 233, 234, 5, 109, 0, 0, 234, 235, 5, 101, 0, 0, 235, 236, 5, 97,
		0, 0, 236, 238, 5, 110, 0, 0, 237, 229, 1, 0, 0, 0, 237, 233, 1, 0, 0,
		0, 238, 30, 1, 0, 0, 0, 239, 240, 5, 77, 0, 0, 240, 241, 5, 79, 0, 0, 241,
		242, 5, 68, 0, 0, 242, 248, 5, 69, 0, 0, 243, 244, 5, 109, 0, 0, 244, 245,
		5, 111, 0, 0, 245, 246, 5, 100, 0, 0, 246, 248, 5, 101, 0, 0, 247, 239,
		1, 0, 0, 0, 247, 243, 1, 0, 0, 0, 248, 32, 1, 0, 0, 0, 249, 250, 5, 77,
		0, 0, 250, 251, 5, 69, 0, 0, 251, 252, 5, 68, 0, 0, 252, 253, 5, 73, 0,
		0, 253, 254, 5, 65, 0, 0, 254, 262, 5, 78, 0, 0, 255, 256, 5, 109, 0, 0,
		256, 257, 5, 101, 0, 0, 257, 258, 5, 100, 0, 0, 258, 259, 5, 105, 0, 0,
		259, 260, 5, 97, 0, 0, 260, 262, 5, 110, 0, 0, 261, 249, 1, 0, 0, 0, 261,
		255, 1, 0, 0, 0, 262, 34, 1, 0, 0, 0, 263, 264, 5, 76, 0, 0, 264, 265,
		5, 69, 0, 0, 265, 270, 5, 78, 0, 0, 266, 267, 5, 108, 0, 0, 267, 268, 5,
		101, 0, 0, 268, 270, 5, 110, 0, 0, 269, 263, 1, 0, 0, 0, 269, 266, 1, 0,
		0, 0, 270, 36, 1, 0, 0, 0, 271, 272, 5, 73, 0, 0, 272, 273, 5, 78, 0, 0,
		273, 278, 5, 84, 0, 0, 274, 275, 5, 105, 0, 0, 275, 276, 5, 110, 0, 0,
		276, 278, 5, 116, 0, 0, 277, 271, 1, 0, 0, 0, 277, 274, 1, 0, 0, 0, 278,
		38, 1, 0, 0, 0, 279, 280, 5, 43, 0, 0, 280, 40, 1, 0, 0, 0, 281, 282, 5,
		45, 0, 0, 282, 42, 1, 0, 0, 0, 283, 284, 5, 42, 0, 0, 284, 44, 1, 0, 0,
		0, 285, 286, 5, 47, 0, 0, 286, 46, 1, 0, 0, 0, 287, 288, 5, 37, 0, 0, 288,
		48, 1, 0, 0, 0, 289, 290, 5, 94, 0, 0, 290, 50, 1, 0, 0, 0, 291, 292, 5,
		33, 0, 0, 292, 293, 5, 61, 0, 0, 293, 52, 1, 0, 0, 0, 294, 295, 5, 62,
		0, 0, 295, 54, 1, 0, 0, 0, 296, 297, 5, 62, 0, 0, 297, 298, 5, 61, 0, 0,
		298, 56, 1, 0, 0, 0, 299, 300, 5, 60, 0, 0, 300, 58, 1, 0, 0, 0, 301, 302,
		5, 60, 0, 0, 302, 303, 5, 61, 0, 0, 303, 60, 1, 0, 0, 0, 304, 305, 5, 61,
		0, 0, 305, 62, 1, 0, 0, 0, 306, 307, 5, 40, 0, 0, 307, 64, 1, 0, 0, 0,
		308, 309, 5, 41, 0, 0, 309, 66, 1, 0, 0, 0, 310, 312, 7, 0, 0, 0, 311,
		310, 1, 0, 0, 0, 312, 313, 1, 0, 0, 0, 313, 311, 1, 0, 0, 0, 313, 314,
		1, 0, 0, 0, 314, 315, 1, 0, 0, 0, 315, 317, 5, 46, 0, 0, 316, 318, 7, 0,
		0, 0, 317, 316, 1, 0, 0, 0, 318, 319, 1, 0, 0, 0, 319, 317, 1, 0, 0, 0,
		319, 320, 1, 0, 0, 0, 320, 68, 1, 0, 0, 0, 321, 324, 7, 0, 0, 0, 322, 323,
		5, 46, 0, 0, 323, 325, 3, 71, 35, 0, 324, 322, 1, 0, 0, 0, 325, 326, 1,
		0, 0, 0, 326, 324, 1, 0, 0, 0, 326, 327, 1, 0, 0, 0, 327, 70, 1, 0, 0,
		0, 328, 330, 7, 0, 0, 0, 329, 328, 1, 0, 0, 0, 330, 331, 1, 0, 0, 0, 331,
		329, 1, 0, 0, 0, 331, 332, 1, 0, 0, 0, 332, 72, 1, 0, 0, 0, 333, 335, 7,
		1, 0, 0, 334, 333, 1, 0, 0, 0, 335, 336, 1, 0, 0, 0, 336, 334, 1, 0, 0,
		0, 336, 337, 1, 0, 0, 0, 337, 338, 1, 0, 0, 0, 338, 339, 6, 36, 0, 0, 339,
		74, 1, 0, 0, 0, 340, 344, 3, 77, 38, 0, 341, 344, 3, 79, 39, 0, 342, 344,
		3, 81, 40, 0, 343, 340, 1, 0, 0, 0, 343, 341, 1, 0, 0, 0, 343, 342, 1,
		0, 0, 0, 344, 345, 1, 0, 0, 0, 345, 343, 1, 0, 0, 0, 345, 346, 1, 0, 0,
		0, 346, 353, 1, 0, 0, 0, 347, 352, 3, 77, 38, 0, 348, 352, 7, 2, 0, 0,
		349, 352, 3, 79, 39, 0, 350, 352, 3, 81, 40, 0, 351, 347, 1, 0, 0, 0, 351,
		348, 1, 0, 0, 0, 351, 349, 1, 0, 0, 0, 351, 350, 1, 0, 0, 0, 352, 355,
		1, 0, 0, 0, 353, 351, 1, 0, 0, 0, 353, 354, 1, 0, 0, 0, 354, 373, 1, 0,
		0, 0, 355, 353, 1, 0, 0, 0, 356, 359, 3, 79, 39, 0, 357, 359, 3, 81, 40,
		0, 358, 356, 1, 0, 0, 0, 358, 357, 1, 0, 0, 0, 359, 364, 1, 0, 0, 0, 360,
		365, 3, 77, 38, 0, 361, 365, 7, 3, 0, 0, 362, 365, 3, 79, 39, 0, 363, 365,
		3, 81, 40, 0, 364, 360, 1, 0, 0, 0, 364, 361, 1, 0, 0, 0, 364, 362, 1,
		0, 0, 0, 364, 363, 1, 0, 0, 0, 365, 366, 1, 0, 0, 0, 366, 364, 1, 0, 0,
		0, 366, 367, 1, 0, 0, 0, 367, 370, 1, 0, 0, 0, 368, 371, 3, 79, 39, 0,
		369, 371, 3, 81, 40, 0, 370, 368, 1, 0, 0, 0, 370, 369, 1, 0, 0, 0, 371,
		373, 1, 0, 0, 0, 372, 343, 1, 0, 0, 0, 372, 358, 1, 0, 0, 0, 373, 76, 1,
		0, 0, 0, 374, 375, 7, 4, 0, 0, 375, 78, 1, 0, 0, 0, 376, 380, 5, 39, 0,
		0, 377, 379, 9, 0, 0, 0, 378, 377, 1, 0, 0, 0, 379, 382, 1, 0, 0, 0, 380,
		381, 1, 0, 0, 0, 380, 378, 1, 0, 0, 0, 381, 383, 1, 0, 0, 0, 382, 380,
		1, 0, 0, 0, 383, 384, 5, 39, 0, 0, 384, 80, 1, 0, 0, 0, 385, 389, 5, 34,
		0, 0, 386, 388, 9, 0, 0, 0, 387, 386, 1, 0, 0, 0, 388, 391, 1, 0, 0, 0,
		389, 390, 1, 0, 0, 0, 389, 387, 1, 0, 0, 0, 390, 392, 1, 0, 0, 0, 391,
		389, 1, 0, 0, 0, 392, 393, 5, 34, 0, 0, 393, 82, 1, 0, 0, 0, 35, 0, 89,
		95, 105, 113, 121, 131, 143, 169, 195, 203, 211, 219, 227, 237, 247, 261,
		269, 277, 313, 319, 326, 331, 336, 343, 345, 351, 353, 358, 364, 366, 370,
		372, 380, 389, 1, 6, 0, 0,
	}
	deserializer := antlr.NewATNDeserializer(nil)
	staticData.atn = deserializer.Deserialize(staticData.serializedATN)
	atn := staticData.atn
	staticData.decisionToDFA = make([]*antlr.DFA, len(atn.DecisionToState))
	decisionToDFA := staticData.decisionToDFA
	for index, state := range atn.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(state, index)
	}
}

// BooleanExpressionLexerInit initializes any static state used to implement BooleanExpressionLexer. By default the
// static state used to implement the lexer is lazily initialized during the first call to
// NewBooleanExpressionLexer(). You can call this function if you wish to initialize the static state ahead
// of time.
func BooleanExpressionLexerInit() {
	staticData := &BooleanExpressionLexerLexerStaticData
	staticData.once.Do(booleanexpressionlexerLexerInit)
}

// NewBooleanExpressionLexer produces a new lexer instance for the optional input antlr.CharStream.
func NewBooleanExpressionLexer(input antlr.CharStream) *BooleanExpressionLexer {
	BooleanExpressionLexerInit()
	l := new(BooleanExpressionLexer)
	l.BaseLexer = antlr.NewBaseLexer(input)
	staticData := &BooleanExpressionLexerLexerStaticData
	l.Interpreter = antlr.NewLexerATNSimulator(l, staticData.atn, staticData.decisionToDFA, staticData.PredictionContextCache)
	l.channelNames = staticData.ChannelNames
	l.modeNames = staticData.ModeNames
	l.RuleNames = staticData.RuleNames
	l.LiteralNames = staticData.LiteralNames
	l.SymbolicNames = staticData.SymbolicNames
	l.GrammarFileName = "BooleanExpression.g4"
	// TODO: l.EOF = antlr.TokenEOF

	return l
}

// BooleanExpressionLexer tokens.
const (
	BooleanExpressionLexerT__0         = 1
	BooleanExpressionLexerIN           = 2
	BooleanExpressionLexerTO           = 3
	BooleanExpressionLexerAND          = 4
	BooleanExpressionLexerOR           = 5
	BooleanExpressionLexerNOT          = 6
	BooleanExpressionLexerTRUE         = 7
	BooleanExpressionLexerFALSE        = 8
	BooleanExpressionLexerCONTAINS_ALL = 9
	BooleanExpressionLexerCONTAINS_ANY = 10
	BooleanExpressionLexerMIN          = 11
	BooleanExpressionLexerMAX          = 12
	BooleanExpressionLexerAVG          = 13
	BooleanExpressionLexerSUM          = 14
	BooleanExpressionLexerMEAN         = 15
	BooleanExpressionLexerMODE         = 16
	BooleanExpressionLexerMEDIAN       = 17
	BooleanExpressionLexerLEN          = 18
	BooleanExpressionLexerINT          = 19
	BooleanExpressionLexerADD          = 20
	BooleanExpressionLexerSUBTRACT     = 21
	BooleanExpressionLexerMULTIPLY     = 22
	BooleanExpressionLexerDIVIDE       = 23
	BooleanExpressionLexerMODULUS      = 24
	BooleanExpressionLexerEXPONENT     = 25
	BooleanExpressionLexerNE           = 26
	BooleanExpressionLexerGT           = 27
	BooleanExpressionLexerGE           = 28
	BooleanExpressionLexerLT           = 29
	BooleanExpressionLexerLE           = 30
	BooleanExpressionLexerEQ           = 31
	BooleanExpressionLexerLPAREN       = 32
	BooleanExpressionLexerRPAREN       = 33
	BooleanExpressionLexerDECIMAL      = 34
	BooleanExpressionLexerAPP_VERSION  = 35
	BooleanExpressionLexerINTEGER      = 36
	BooleanExpressionLexerWS           = 37
	BooleanExpressionLexerWORD         = 38
	BooleanExpressionLexerALPHANUMERIC = 39
	BooleanExpressionLexerSQ           = 40
	BooleanExpressionLexerDQ           = 41
)
