// Code generated from /Users/sid/Desktop/filter2/BooleanExpression.g4 by ANTLR 4.13.1. DO NOT EDIT.

package lib

import (
	"fmt"
	"github.com/antlr4-go/antlr/v4"
	"sync"
	"unicode"
)

// Suppress unused import error
var _ = fmt.Printf
var _ = sync.Once{}
var _ = unicode.IsLetter

type BooleanExpressionLexer struct {
	*antlr.BaseLexer
	channelNames []string
	modeNames    []string
	// TODO: EOF string
}

var BooleanExpressionLexerLexerStaticData struct {
	once                   sync.Once
	serializedATN          []int32
	ChannelNames           []string
	ModeNames              []string
	LiteralNames           []string
	SymbolicNames          []string
	RuleNames              []string
	PredictionContextCache *antlr.PredictionContextCache
	atn                    *antlr.ATN
	decisionToDFA          []*antlr.DFA
}

func booleanexpressionlexerLexerInit() {
	staticData := &BooleanExpressionLexerLexerStaticData
	staticData.ChannelNames = []string{
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	}
	staticData.ModeNames = []string{
		"DEFAULT_MODE",
	}
	staticData.LiteralNames = []string{
		"", "','", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
		"", "", "", "'+'", "'-'", "'*'", "'/'", "'%'", "'^'", "'!='", "'>'",
		"'>='", "'<'", "'<='", "'='", "'('", "')'",
	}
	staticData.SymbolicNames = []string{
		"", "", "IN", "TO", "AND", "OR", "NOT", "TRUE", "FALSE", "CONTAINS_ALL",
		"CONTAINS_ANY", "MIN", "MAX", "AVG", "SUM", "MEAN", "MODE", "MEDIAN",
		"LEN", "INT", "ADD", "SUBTRACT", "MULTIPLY", "DIVIDE", "MODULUS", "EXPONENT",
		"NE", "GT", "GE", "LT", "LE", "EQ", "LPAREN", "RPAREN", "DECIMAL", "APP_VERSION",
		"INTEGER", "WS", "WORD", "SQSTR", "DQSTR", "FIELD", "ALPHANUMERIC",
		"SQ", "DQ",
	}
	staticData.RuleNames = []string{
		"T__0", "IN", "TO", "AND", "OR", "NOT", "TRUE", "FALSE", "CONTAINS_ALL",
		"CONTAINS_ANY", "MIN", "MAX", "AVG", "SUM", "MEAN", "MODE", "MEDIAN",
		"LEN", "INT", "ADD", "SUBTRACT", "MULTIPLY", "DIVIDE", "MODULUS", "EXPONENT",
		"NE", "GT", "GE", "LT", "LE", "EQ", "LPAREN", "RPAREN", "DECIMAL", "APP_VERSION",
		"INTEGER", "WS", "WORD", "SQSTR", "DQSTR", "FIELD", "ALPHANUMERIC",
		"SQ", "DQ",
	}
	staticData.PredictionContextCache = antlr.NewPredictionContextCache()
	staticData.serializedATN = []int32{
		4, 0, 44, 394, 6, -1, 2, 0, 7, 0, 2, 1, 7, 1, 2, 2, 7, 2, 2, 3, 7, 3, 2,
		4, 7, 4, 2, 5, 7, 5, 2, 6, 7, 6, 2, 7, 7, 7, 2, 8, 7, 8, 2, 9, 7, 9, 2,
		10, 7, 10, 2, 11, 7, 11, 2, 12, 7, 12, 2, 13, 7, 13, 2, 14, 7, 14, 2, 15,
		7, 15, 2, 16, 7, 16, 2, 17, 7, 17, 2, 18, 7, 18, 2, 19, 7, 19, 2, 20, 7,
		20, 2, 21, 7, 21, 2, 22, 7, 22, 2, 23, 7, 23, 2, 24, 7, 24, 2, 25, 7, 25,
		2, 26, 7, 26, 2, 27, 7, 27, 2, 28, 7, 28, 2, 29, 7, 29, 2, 30, 7, 30, 2,
		31, 7, 31, 2, 32, 7, 32, 2, 33, 7, 33, 2, 34, 7, 34, 2, 35, 7, 35, 2, 36,
		7, 36, 2, 37, 7, 37, 2, 38, 7, 38, 2, 39, 7, 39, 2, 40, 7, 40, 2, 41, 7,
		41, 2, 42, 7, 42, 2, 43, 7, 43, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 3,
		1, 96, 8, 1, 1, 2, 1, 2, 1, 2, 1, 2, 3, 2, 102, 8, 2, 1, 3, 1, 3, 1, 3,
		1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 3, 3, 112, 8, 3, 1, 4, 1, 4, 1, 4, 1, 4,
		1, 4, 1, 4, 3, 4, 120, 8, 4, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 3, 5,
		128, 8, 5, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 3, 6, 138, 8,
		6, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 3, 7, 150,
		8, 7, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8,
		1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8,
		1, 8, 3, 8, 176, 8, 8, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9,
		1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9, 1, 9,
		1, 9, 1, 9, 1, 9, 1, 9, 3, 9, 202, 8, 9, 1, 10, 1, 10, 1, 10, 1, 10, 1,
		10, 1, 10, 3, 10, 210, 8, 10, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11,
		3, 11, 218, 8, 11, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 1, 12, 3, 12, 226,
		8, 12, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 3, 13, 234, 8, 13, 1,
		14, 1, 14, 1, 14, 1, 14, 1, 14, 1, 14, 1, 14, 1, 14, 3, 14, 244, 8, 14,
		1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 3, 15, 254, 8,
		15, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16,
		1, 16, 1, 16, 3, 16, 268, 8, 16, 1, 17, 1, 17, 1, 17, 1, 17, 1, 17, 1,
		17, 3, 17, 276, 8, 17, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 3, 18,
		284, 8, 18, 1, 19, 1, 19, 1, 20, 1, 20, 1, 21, 1, 21, 1, 22, 1, 22, 1,
		23, 1, 23, 1, 24, 1, 24, 1, 25, 1, 25, 1, 25, 1, 26, 1, 26, 1, 27, 1, 27,
		1, 27, 1, 28, 1, 28, 1, 29, 1, 29, 1, 29, 1, 30, 1, 30, 1, 31, 1, 31, 1,
		32, 1, 32, 1, 33, 4, 33, 318, 8, 33, 11, 33, 12, 33, 319, 1, 33, 1, 33,
		4, 33, 324, 8, 33, 11, 33, 12, 33, 325, 1, 34, 1, 34, 1, 34, 4, 34, 331,
		8, 34, 11, 34, 12, 34, 332, 1, 35, 4, 35, 336, 8, 35, 11, 35, 12, 35, 337,
		1, 36, 4, 36, 341, 8, 36, 11, 36, 12, 36, 342, 1, 36, 1, 36, 1, 37, 1,
		37, 3, 37, 349, 8, 37, 1, 38, 1, 38, 5, 38, 353, 8, 38, 10, 38, 12, 38,
		356, 9, 38, 1, 38, 1, 38, 1, 39, 1, 39, 5, 39, 362, 8, 39, 10, 39, 12,
		39, 365, 9, 39, 1, 39, 1, 39, 1, 40, 1, 40, 4, 40, 371, 8, 40, 11, 40,
		12, 40, 372, 1, 41, 1, 41, 1, 42, 1, 42, 5, 42, 379, 8, 42, 10, 42, 12,
		42, 382, 9, 42, 1, 42, 1, 42, 1, 43, 1, 43, 5, 43, 388, 8, 43, 10, 43,
		12, 43, 391, 9, 43, 1, 43, 1, 43, 4, 354, 363, 380, 389, 0, 44, 1, 1, 3,
		2, 5, 3, 7, 4, 9, 5, 11, 6, 13, 7, 15, 8, 17, 9, 19, 10, 21, 11, 23, 12,
		25, 13, 27, 14, 29, 15, 31, 16, 33, 17, 35, 18, 37, 19, 39, 20, 41, 21,
		43, 22, 45, 23, 47, 24, 49, 25, 51, 26, 53, 27, 55, 28, 57, 29, 59, 30,
		61, 31, 63, 32, 65, 33, 67, 34, 69, 35, 71, 36, 73, 37, 75, 38, 77, 39,
		79, 40, 81, 41, 83, 42, 85, 43, 87, 44, 1, 0, 4, 1, 0, 48, 57, 3, 0, 9,
		10, 12, 13, 32, 32, 2, 0, 46, 46, 95, 95, 3, 0, 48, 57, 65, 90, 97, 122,
		425, 0, 1, 1, 0, 0, 0, 0, 3, 1, 0, 0, 0, 0, 5, 1, 0, 0, 0, 0, 7, 1, 0,
		0, 0, 0, 9, 1, 0, 0, 0, 0, 11, 1, 0, 0, 0, 0, 13, 1, 0, 0, 0, 0, 15, 1,
		0, 0, 0, 0, 17, 1, 0, 0, 0, 0, 19, 1, 0, 0, 0, 0, 21, 1, 0, 0, 0, 0, 23,
		1, 0, 0, 0, 0, 25, 1, 0, 0, 0, 0, 27, 1, 0, 0, 0, 0, 29, 1, 0, 0, 0, 0,
		31, 1, 0, 0, 0, 0, 33, 1, 0, 0, 0, 0, 35, 1, 0, 0, 0, 0, 37, 1, 0, 0, 0,
		0, 39, 1, 0, 0, 0, 0, 41, 1, 0, 0, 0, 0, 43, 1, 0, 0, 0, 0, 45, 1, 0, 0,
		0, 0, 47, 1, 0, 0, 0, 0, 49, 1, 0, 0, 0, 0, 51, 1, 0, 0, 0, 0, 53, 1, 0,
		0, 0, 0, 55, 1, 0, 0, 0, 0, 57, 1, 0, 0, 0, 0, 59, 1, 0, 0, 0, 0, 61, 1,
		0, 0, 0, 0, 63, 1, 0, 0, 0, 0, 65, 1, 0, 0, 0, 0, 67, 1, 0, 0, 0, 0, 69,
		1, 0, 0, 0, 0, 71, 1, 0, 0, 0, 0, 73, 1, 0, 0, 0, 0, 75, 1, 0, 0, 0, 0,
		77, 1, 0, 0, 0, 0, 79, 1, 0, 0, 0, 0, 81, 1, 0, 0, 0, 0, 83, 1, 0, 0, 0,
		0, 85, 1, 0, 0, 0, 0, 87, 1, 0, 0, 0, 1, 89, 1, 0, 0, 0, 3, 95, 1, 0, 0,
		0, 5, 101, 1, 0, 0, 0, 7, 111, 1, 0, 0, 0, 9, 119, 1, 0, 0, 0, 11, 127,
		1, 0, 0, 0, 13, 137, 1, 0, 0, 0, 15, 149, 1, 0, 0, 0, 17, 175, 1, 0, 0,
		0, 19, 201, 1, 0, 0, 0, 21, 209, 1, 0, 0, 0, 23, 217, 1, 0, 0, 0, 25, 225,
		1, 0, 0, 0, 27, 233, 1, 0, 0, 0, 29, 243, 1, 0, 0, 0, 31, 253, 1, 0, 0,
		0, 33, 267, 1, 0, 0, 0, 35, 275, 1, 0, 0, 0, 37, 283, 1, 0, 0, 0, 39, 285,
		1, 0, 0, 0, 41, 287, 1, 0, 0, 0, 43, 289, 1, 0, 0, 0, 45, 291, 1, 0, 0,
		0, 47, 293, 1, 0, 0, 0, 49, 295, 1, 0, 0, 0, 51, 297, 1, 0, 0, 0, 53, 300,
		1, 0, 0, 0, 55, 302, 1, 0, 0, 0, 57, 305, 1, 0, 0, 0, 59, 307, 1, 0, 0,
		0, 61, 310, 1, 0, 0, 0, 63, 312, 1, 0, 0, 0, 65, 314, 1, 0, 0, 0, 67, 317,
		1, 0, 0, 0, 69, 327, 1, 0, 0, 0, 71, 335, 1, 0, 0, 0, 73, 340, 1, 0, 0,
		0, 75, 348, 1, 0, 0, 0, 77, 350, 1, 0, 0, 0, 79, 359, 1, 0, 0, 0, 81, 370,
		1, 0, 0, 0, 83, 374, 1, 0, 0, 0, 85, 376, 1, 0, 0, 0, 87, 385, 1, 0, 0,
		0, 89, 90, 5, 44, 0, 0, 90, 2, 1, 0, 0, 0, 91, 92, 5, 73, 0, 0, 92, 96,
		5, 78, 0, 0, 93, 94, 5, 105, 0, 0, 94, 96, 5, 110, 0, 0, 95, 91, 1, 0,
		0, 0, 95, 93, 1, 0, 0, 0, 96, 4, 1, 0, 0, 0, 97, 98, 5, 84, 0, 0, 98, 102,
		5, 79, 0, 0, 99, 100, 5, 116, 0, 0, 100, 102, 5, 111, 0, 0, 101, 97, 1,
		0, 0, 0, 101, 99, 1, 0, 0, 0, 102, 6, 1, 0, 0, 0, 103, 104, 5, 65, 0, 0,
		104, 105, 5, 78, 0, 0, 105, 112, 5, 68, 0, 0, 106, 107, 5, 97, 0, 0, 107,
		108, 5, 110, 0, 0, 108, 112, 5, 100, 0, 0, 109, 110, 5, 38, 0, 0, 110,
		112, 5, 38, 0, 0, 111, 103, 1, 0, 0, 0, 111, 106, 1, 0, 0, 0, 111, 109,
		1, 0, 0, 0, 112, 8, 1, 0, 0, 0, 113, 114, 5, 79, 0, 0, 114, 120, 5, 82,
		0, 0, 115, 116, 5, 111, 0, 0, 116, 120, 5, 114, 0, 0, 117, 118, 5, 124,
		0, 0, 118, 120, 5, 124, 0, 0, 119, 113, 1, 0, 0, 0, 119, 115, 1, 0, 0,
		0, 119, 117, 1, 0, 0, 0, 120, 10, 1, 0, 0, 0, 121, 122, 5, 78, 0, 0, 122,
		123, 5, 79, 0, 0, 123, 128, 5, 84, 0, 0, 124, 125, 5, 110, 0, 0, 125, 126,
		5, 111, 0, 0, 126, 128, 5, 116, 0, 0, 127, 121, 1, 0, 0, 0, 127, 124, 1,
		0, 0, 0, 128, 12, 1, 0, 0, 0, 129, 130, 5, 84, 0, 0, 130, 131, 5, 82, 0,
		0, 131, 132, 5, 85, 0, 0, 132, 138, 5, 69, 0, 0, 133, 134, 5, 116, 0, 0,
		134, 135, 5, 114, 0, 0, 135, 136, 5, 117, 0, 0, 136, 138, 5, 101, 0, 0,
		137, 129, 1, 0, 0, 0, 137, 133, 1, 0, 0, 0, 138, 14, 1, 0, 0, 0, 139, 140,
		5, 70, 0, 0, 140, 141, 5, 65, 0, 0, 141, 142, 5, 76, 0, 0, 142, 143, 5,
		83, 0, 0, 143, 150, 5, 69, 0, 0, 144, 145, 5, 102, 0, 0, 145, 146, 5, 97,
		0, 0, 146, 147, 5, 108, 0, 0, 147, 148, 5, 115, 0, 0, 148, 150, 5, 101,
		0, 0, 149, 139, 1, 0, 0, 0, 149, 144, 1, 0, 0, 0, 150, 16, 1, 0, 0, 0,
		151, 152, 5, 67, 0, 0, 152, 153, 5, 79, 0, 0, 153, 154, 5, 78, 0, 0, 154,
		155, 5, 84, 0, 0, 155, 156, 5, 65, 0, 0, 156, 157, 5, 73, 0, 0, 157, 158,
		5, 78, 0, 0, 158, 159, 5, 83, 0, 0, 159, 160, 5, 95, 0, 0, 160, 161, 5,
		65, 0, 0, 161, 162, 5, 76, 0, 0, 162, 176, 5, 76, 0, 0, 163, 164, 5, 99,
		0, 0, 164, 165, 5, 111, 0, 0, 165, 166, 5, 110, 0, 0, 166, 167, 5, 116,
		0, 0, 167, 168, 5, 97, 0, 0, 168, 169, 5, 105, 0, 0, 169, 170, 5, 110,
		0, 0, 170, 171, 5, 115, 0, 0, 171, 172, 5, 95, 0, 0, 172, 173, 5, 97, 0,
		0, 173, 174, 5, 108, 0, 0, 174, 176, 5, 108, 0, 0, 175, 151, 1, 0, 0, 0,
		175, 163, 1, 0, 0, 0, 176, 18, 1, 0, 0, 0, 177, 178, 5, 67, 0, 0, 178,
		179, 5, 79, 0, 0, 179, 180, 5, 78, 0, 0, 180, 181, 5, 84, 0, 0, 181, 182,
		5, 65, 0, 0, 182, 183, 5, 73, 0, 0, 183, 184, 5, 78, 0, 0, 184, 185, 5,
		83, 0, 0, 185, 186, 5, 95, 0, 0, 186, 187, 5, 65, 0, 0, 187, 188, 5, 78,
		0, 0, 188, 202, 5, 89, 0, 0, 189, 190, 5, 99, 0, 0, 190, 191, 5, 111, 0,
		0, 191, 192, 5, 110, 0, 0, 192, 193, 5, 116, 0, 0, 193, 194, 5, 97, 0,
		0, 194, 195, 5, 105, 0, 0, 195, 196, 5, 110, 0, 0, 196, 197, 5, 115, 0,
		0, 197, 198, 5, 95, 0, 0, 198, 199, 5, 97, 0, 0, 199, 200, 5, 110, 0, 0,
		200, 202, 5, 121, 0, 0, 201, 177, 1, 0, 0, 0, 201, 189, 1, 0, 0, 0, 202,
		20, 1, 0, 0, 0, 203, 204, 5, 77, 0, 0, 204, 205, 5, 73, 0, 0, 205, 210,
		5, 78, 0, 0, 206, 207, 5, 109, 0, 0, 207, 208, 5, 105, 0, 0, 208, 210,
		5, 110, 0, 0, 209, 203, 1, 0, 0, 0, 209, 206, 1, 0, 0, 0, 210, 22, 1, 0,
		0, 0, 211, 212, 5, 77, 0, 0, 212, 213, 5, 65, 0, 0, 213, 218, 5, 88, 0,
		0, 214, 215, 5, 109, 0, 0, 215, 216, 5, 97, 0, 0, 216, 218, 5, 120, 0,
		0, 217, 211, 1, 0, 0, 0, 217, 214, 1, 0, 0, 0, 218, 24, 1, 0, 0, 0, 219,
		220, 5, 65, 0, 0, 220, 221, 5, 86, 0, 0, 221, 226, 5, 71, 0, 0, 222, 223,
		5, 97, 0, 0, 223, 224, 5, 118, 0, 0, 224, 226, 5, 103, 0, 0, 225, 219,
		1, 0, 0, 0, 225, 222, 1, 0, 0, 0, 226, 26, 1, 0, 0, 0, 227, 228, 5, 83,
		0, 0, 228, 229, 5, 85, 0, 0, 229, 234, 5, 77, 0, 0, 230, 231, 5, 115, 0,
		0, 231, 232, 5, 117, 0, 0, 232, 234, 5, 109, 0, 0, 233, 227, 1, 0, 0, 0,
		233, 230, 1, 0, 0, 0, 234, 28, 1, 0, 0, 0, 235, 236, 5, 77, 0, 0, 236,
		237, 5, 69, 0, 0, 237, 238, 5, 65, 0, 0, 238, 244, 5, 78, 0, 0, 239, 240,
		5, 109, 0, 0, 240, 241, 5, 101, 0, 0, 241, 242, 5, 97, 0, 0, 242, 244,
		5, 110, 0, 0, 243, 235, 1, 0, 0, 0, 243, 239, 1, 0, 0, 0, 244, 30, 1, 0,
		0, 0, 245, 246, 5, 77, 0, 0, 246, 247, 5, 79, 0, 0, 247, 248, 5, 68, 0,
		0, 248, 254, 5, 69, 0, 0, 249, 250, 5, 109, 0, 0, 250, 251, 5, 111, 0,
		0, 251, 252, 5, 100, 0, 0, 252, 254, 5, 101, 0, 0, 253, 245, 1, 0, 0, 0,
		253, 249, 1, 0, 0, 0, 254, 32, 1, 0, 0, 0, 255, 256, 5, 77, 0, 0, 256,
		257, 5, 69, 0, 0, 257, 258, 5, 68, 0, 0, 258, 259, 5, 73, 0, 0, 259, 260,
		5, 65, 0, 0, 260, 268, 5, 78, 0, 0, 261, 262, 5, 109, 0, 0, 262, 263, 5,
		101, 0, 0, 263, 264, 5, 100, 0, 0, 264, 265, 5, 105, 0, 0, 265, 266, 5,
		97, 0, 0, 266, 268, 5, 110, 0, 0, 267, 255, 1, 0, 0, 0, 267, 261, 1, 0,
		0, 0, 268, 34, 1, 0, 0, 0, 269, 270, 5, 76, 0, 0, 270, 271, 5, 69, 0, 0,
		271, 276, 5, 78, 0, 0, 272, 273, 5, 108, 0, 0, 273, 274, 5, 101, 0, 0,
		274, 276, 5, 110, 0, 0, 275, 269, 1, 0, 0, 0, 275, 272, 1, 0, 0, 0, 276,
		36, 1, 0, 0, 0, 277, 278, 5, 73, 0, 0, 278, 279, 5, 78, 0, 0, 279, 284,
		5, 84, 0, 0, 280, 281, 5, 105, 0, 0, 281, 282, 5, 110, 0, 0, 282, 284,
		5, 116, 0, 0, 283, 277, 1, 0, 0, 0, 283, 280, 1, 0, 0, 0, 284, 38, 1, 0,
		0, 0, 285, 286, 5, 43, 0, 0, 286, 40, 1, 0, 0, 0, 287, 288, 5, 45, 0, 0,
		288, 42, 1, 0, 0, 0, 289, 290, 5, 42, 0, 0, 290, 44, 1, 0, 0, 0, 291, 292,
		5, 47, 0, 0, 292, 46, 1, 0, 0, 0, 293, 294, 5, 37, 0, 0, 294, 48, 1, 0,
		0, 0, 295, 296, 5, 94, 0, 0, 296, 50, 1, 0, 0, 0, 297, 298, 5, 33, 0, 0,
		298, 299, 5, 61, 0, 0, 299, 52, 1, 0, 0, 0, 300, 301, 5, 62, 0, 0, 301,
		54, 1, 0, 0, 0, 302, 303, 5, 62, 0, 0, 303, 304, 5, 61, 0, 0, 304, 56,
		1, 0, 0, 0, 305, 306, 5, 60, 0, 0, 306, 58, 1, 0, 0, 0, 307, 308, 5, 60,
		0, 0, 308, 309, 5, 61, 0, 0, 309, 60, 1, 0, 0, 0, 310, 311, 5, 61, 0, 0,
		311, 62, 1, 0, 0, 0, 312, 313, 5, 40, 0, 0, 313, 64, 1, 0, 0, 0, 314, 315,
		5, 41, 0, 0, 315, 66, 1, 0, 0, 0, 316, 318, 7, 0, 0, 0, 317, 316, 1, 0,
		0, 0, 318, 319, 1, 0, 0, 0, 319, 317, 1, 0, 0, 0, 319, 320, 1, 0, 0, 0,
		320, 321, 1, 0, 0, 0, 321, 323, 5, 46, 0, 0, 322, 324, 7, 0, 0, 0, 323,
		322, 1, 0, 0, 0, 324, 325, 1, 0, 0, 0, 325, 323, 1, 0, 0, 0, 325, 326,
		1, 0, 0, 0, 326, 68, 1, 0, 0, 0, 327, 330, 7, 0, 0, 0, 328, 329, 5, 46,
		0, 0, 329, 331, 3, 71, 35, 0, 330, 328, 1, 0, 0, 0, 331, 332, 1, 0, 0,
		0, 332, 330, 1, 0, 0, 0, 332, 333, 1, 0, 0, 0, 333, 70, 1, 0, 0, 0, 334,
		336, 7, 0, 0, 0, 335, 334, 1, 0, 0, 0, 336, 337, 1, 0, 0, 0, 337, 335,
		1, 0, 0, 0, 337, 338, 1, 0, 0, 0, 338, 72, 1, 0, 0, 0, 339, 341, 7, 1,
		0, 0, 340, 339, 1, 0, 0, 0, 341, 342, 1, 0, 0, 0, 342, 340, 1, 0, 0, 0,
		342, 343, 1, 0, 0, 0, 343, 344, 1, 0, 0, 0, 344, 345, 6, 36, 0, 0, 345,
		74, 1, 0, 0, 0, 346, 349, 3, 77, 38, 0, 347, 349, 3, 79, 39, 0, 348, 346,
		1, 0, 0, 0, 348, 347, 1, 0, 0, 0, 349, 76, 1, 0, 0, 0, 350, 354, 5, 39,
		0, 0, 351, 353, 9, 0, 0, 0, 352, 351, 1, 0, 0, 0, 353, 356, 1, 0, 0, 0,
		354, 355, 1, 0, 0, 0, 354, 352, 1, 0, 0, 0, 355, 357, 1, 0, 0, 0, 356,
		354, 1, 0, 0, 0, 357, 358, 5, 39, 0, 0, 358, 78, 1, 0, 0, 0, 359, 363,
		5, 34, 0, 0, 360, 362, 9, 0, 0, 0, 361, 360, 1, 0, 0, 0, 362, 365, 1, 0,
		0, 0, 363, 364, 1, 0, 0, 0, 363, 361, 1, 0, 0, 0, 364, 366, 1, 0, 0, 0,
		365, 363, 1, 0, 0, 0, 366, 367, 5, 34, 0, 0, 367, 80, 1, 0, 0, 0, 368,
		371, 3, 83, 41, 0, 369, 371, 7, 2, 0, 0, 370, 368, 1, 0, 0, 0, 370, 369,
		1, 0, 0, 0, 371, 372, 1, 0, 0, 0, 372, 370, 1, 0, 0, 0, 372, 373, 1, 0,
		0, 0, 373, 82, 1, 0, 0, 0, 374, 375, 7, 3, 0, 0, 375, 84, 1, 0, 0, 0, 376,
		380, 5, 39, 0, 0, 377, 379, 9, 0, 0, 0, 378, 377, 1, 0, 0, 0, 379, 382,
		1, 0, 0, 0, 380, 381, 1, 0, 0, 0, 380, 378, 1, 0, 0, 0, 381, 383, 1, 0,
		0, 0, 382, 380, 1, 0, 0, 0, 383, 384, 5, 39, 0, 0, 384, 86, 1, 0, 0, 0,
		385, 389, 5, 34, 0, 0, 386, 388, 9, 0, 0, 0, 387, 386, 1, 0, 0, 0, 388,
		391, 1, 0, 0, 0, 389, 390, 1, 0, 0, 0, 389, 387, 1, 0, 0, 0, 390, 392,
		1, 0, 0, 0, 391, 389, 1, 0, 0, 0, 392, 393, 5, 34, 0, 0, 393, 88, 1, 0,
		0, 0, 31, 0, 95, 101, 111, 119, 127, 137, 149, 175, 201, 209, 217, 225,
		233, 243, 253, 267, 275, 283, 319, 325, 332, 337, 342, 348, 354, 363, 370,
		372, 380, 389, 1, 6, 0, 0,
	}
	deserializer := antlr.NewATNDeserializer(nil)
	staticData.atn = deserializer.Deserialize(staticData.serializedATN)
	atn := staticData.atn
	staticData.decisionToDFA = make([]*antlr.DFA, len(atn.DecisionToState))
	decisionToDFA := staticData.decisionToDFA
	for index, state := range atn.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(state, index)
	}
}

// BooleanExpressionLexerInit initializes any static state used to implement BooleanExpressionLexer. By default the
// static state used to implement the lexer is lazily initialized during the first call to
// NewBooleanExpressionLexer(). You can call this function if you wish to initialize the static state ahead
// of time.
func BooleanExpressionLexerInit() {
	staticData := &BooleanExpressionLexerLexerStaticData
	staticData.once.Do(booleanexpressionlexerLexerInit)
}

// NewBooleanExpressionLexer produces a new lexer instance for the optional input antlr.CharStream.
func NewBooleanExpressionLexer(input antlr.CharStream) *BooleanExpressionLexer {
	BooleanExpressionLexerInit()
	l := new(BooleanExpressionLexer)
	l.BaseLexer = antlr.NewBaseLexer(input)
	staticData := &BooleanExpressionLexerLexerStaticData
	l.Interpreter = antlr.NewLexerATNSimulator(l, staticData.atn, staticData.decisionToDFA, staticData.PredictionContextCache)
	l.channelNames = staticData.ChannelNames
	l.modeNames = staticData.ModeNames
	l.RuleNames = staticData.RuleNames
	l.LiteralNames = staticData.LiteralNames
	l.SymbolicNames = staticData.SymbolicNames
	l.GrammarFileName = "BooleanExpression.g4"
	// TODO: l.EOF = antlr.TokenEOF

	return l
}

// BooleanExpressionLexer tokens.
const (
	BooleanExpressionLexerT__0         = 1
	BooleanExpressionLexerIN           = 2
	BooleanExpressionLexerTO           = 3
	BooleanExpressionLexerAND          = 4
	BooleanExpressionLexerOR           = 5
	BooleanExpressionLexerNOT          = 6
	BooleanExpressionLexerTRUE         = 7
	BooleanExpressionLexerFALSE        = 8
	BooleanExpressionLexerCONTAINS_ALL = 9
	BooleanExpressionLexerCONTAINS_ANY = 10
	BooleanExpressionLexerMIN          = 11
	BooleanExpressionLexerMAX          = 12
	BooleanExpressionLexerAVG          = 13
	BooleanExpressionLexerSUM          = 14
	BooleanExpressionLexerMEAN         = 15
	BooleanExpressionLexerMODE         = 16
	BooleanExpressionLexerMEDIAN       = 17
	BooleanExpressionLexerLEN          = 18
	BooleanExpressionLexerINT          = 19
	BooleanExpressionLexerADD          = 20
	BooleanExpressionLexerSUBTRACT     = 21
	BooleanExpressionLexerMULTIPLY     = 22
	BooleanExpressionLexerDIVIDE       = 23
	BooleanExpressionLexerMODULUS      = 24
	BooleanExpressionLexerEXPONENT     = 25
	BooleanExpressionLexerNE           = 26
	BooleanExpressionLexerGT           = 27
	BooleanExpressionLexerGE           = 28
	BooleanExpressionLexerLT           = 29
	BooleanExpressionLexerLE           = 30
	BooleanExpressionLexerEQ           = 31
	BooleanExpressionLexerLPAREN       = 32
	BooleanExpressionLexerRPAREN       = 33
	BooleanExpressionLexerDECIMAL      = 34
	BooleanExpressionLexerAPP_VERSION  = 35
	BooleanExpressionLexerINTEGER      = 36
	BooleanExpressionLexerWS           = 37
	BooleanExpressionLexerWORD         = 38
	BooleanExpressionLexerSQSTR        = 39
	BooleanExpressionLexerDQSTR        = 40
	BooleanExpressionLexerFIELD        = 41
	BooleanExpressionLexerALPHANUMERIC = 42
	BooleanExpressionLexerSQ           = 43
	BooleanExpressionLexerDQ           = 44
)
